trigger:
    branches:
      include: 
        - main
        # - dev
        - hotfix/*

pool:
  vmImage: 'ubuntu-latest'

variables:
    APP_WEBAPP_NAME: 'onaxapp'
    AZURE_WEBAPP_PACKAGE_PATH: 'Onaxapp/publish'
    CONFIGURATION: 'Release'
    DOTNET_CORE_VERSION: '9.0.x'
    WORKING_DIRECTORY: '.'
    WORKING_DIRECTORY_UI: 'clientapp'
    PUBLISH_PATH_UI: 'WebApp/wwwroot/portal'
    PUBLISHED_APP_PATH: 'WebApp/dist'
    WORKING_DIRECTORY_SERVER: './WebApp'


stages:
- stage: FrontendEnvDependencies
  jobs:
  - job: frontend_env_dependencies
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs:
        versionSpec: '20.16.0'
      displayName: 'Setup Node.js'
    - script: npm install -g typescript
      displayName: 'Install TypeScript'

- stage: TestAndBuildApp
  dependsOn: FrontendEnvDependencies
  jobs:
  - job: test_and_build_app
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '$(DOTNET_CORE_VERSION)'
      displayName: 'Setup .NET SDK'
    - script: |
        echo "===Working Dir:::=> $(WORKING_DIRECTORY_SERVER)==="
        pwd
        ls -l
        dotnet restore
      workingDirectory: $(WORKING_DIRECTORY_SERVER)
      displayName: 'Restore Dependencies'
    - script: |
        echo "======Install and build Client UI packages======="
        npm install -f
        mkdir -p $(PUBLISH_PATH_UI)
        npm run build
      workingDirectory: $(WORKING_DIRECTORY_UI)
      displayName: 'Install NPM packages'
    - script: |
        echo "==========Verify Frontend Build (List Dir.)============"
        ls -l $(PUBLISH_PATH_UI)
      displayName: 'Verify Frontend Build'
    - script: |
        echo "==========Install Node for TailwindCSS NodeJS dependencies============"
        sudo apt-get update && \
        sudo apt-get install -y curl && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash - && \
        sudo apt-get install -y nodejs && \
        sudo npm install -g npm@latest && \
        sudo apt-get clean && \
        sudo rm -rf /var/lib/apt/lists/*
      displayName: 'Install Node for MVC TailwindCSS NodeJS dependencies'    
    - script: |
        echo "==========Running Tests============"
        ls -l
        dotnet test --no-build
      workingDirectory: $(WORKING_DIRECTORY)/AppTest
      displayName: 'Test'    
    - script: |
        echo "==========Building Server App============"
        node --version
        npm --version
        ls -l
        npm install
        ls -l
        dotnet build --configuration $(CONFIGURATION) --no-restore
      workingDirectory: $(WORKING_DIRECTORY_SERVER)
      displayName: 'Build Server App'    # Publishing to Azure Web App
    - script: |
        set -e
        dotnet publish $(WORKING_DIRECTORY_SERVER)/WebApp.csproj --configuration $(CONFIGURATION) --no-build --output $(AZURE_WEBAPP_PACKAGE_PATH)
        echo "==========Verify Frontend Migration to build output============"
        ls -l $(AZURE_WEBAPP_PACKAGE_PATH)/wwwroot
      displayName: 'Publish'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(AZURE_WEBAPP_PACKAGE_PATH)'
        ArtifactName: 'webapp'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'
    # Add Docker build/push steps as needed for main branch

- stage: DeployToServer
  dependsOn: TestAndBuildApp
  jobs:
  - job: deploy_to_server
    steps:
    - checkout: none

    # Download the published artifact from previous stage
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Published Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'webapp'
        downloadPath: '$(Pipeline.Workspace)/webapp'

    # Copy files to the remote server using SSH
    - task: CopyFilesOverSSH@0
      displayName: 'Copy files to /var/www/onaxappcore on remote server'
      inputs:
        sshEndpoint: 'onax-me-ssh-service-connection'
        sourceFolder: '$(Pipeline.Workspace)/webapp/webapp/'
        contents: '**/*'
        targetFolder: '/var/www/onaxappcore'
        cleanTargetFolder: false
        overwrite: true