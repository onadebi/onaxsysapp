trigger:
    branches:
      include: 
        - main
        # - dev
        - hotfix/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  - name: APP_WEBAPP_NAME
    value: 'onaxapp'
  - name: AZURE_WEBAPP_PACKAGE_PATH
    value: 'Onaxapp/publish'
  - name: CONFIGURATION
    value: 'Release'
  - name: DOTNET_CORE_VERSION
    value: '9.0.x'
  - name: WORKING_DIRECTORY
    value: '.'
  - name: WORKING_DIRECTORY_UI
    value: 'clientapp'
  - name: PUBLISH_PATH_UI
    value: 'WebApp/wwwroot/portal'
  - name: PUBLISHED_APP_PATH
    value: 'WebApp/dist'
  - name: WORKING_DIRECTORY_SERVER
    value: './WebApp'
  - name: ONAX_ENV_VARS
    value: 'onax-env-vars.sh'
  # Import variable group from Azure DevOps Library
  - group: OnaxAppCore

stages:
- stage: FrontendEnvDependencies
  jobs:
  - job: frontend_env_dependencies
    steps:
    - checkout: self
    - task: NodeTool@0
      inputs:
        versionSpec: '20.16.0'
      displayName: 'Setup Node.js'
    - script: npm install -g typescript
      displayName: 'Install TypeScript'

- stage: TestAndBuildApp
  dependsOn: FrontendEnvDependencies
  jobs:
  - job: test_and_build_app
    steps:
    - checkout: self
      fetchDepth: 0

    # SonarCloud - Prepare Analysis Configuration
    - task: SonarCloudPrepare@3
      displayName: 'Prepare SonarCloud Analysis'
      inputs:
        SonarQube: 'onax-sonarcloud-io'
        organization: 'onax-sonarcloud'
        scannerMode: 'dotnet'
        dotnetScannerVersion: '9.2.1.110358'
        projectKey: 'onaxsys_onaxsysapp'
        projectName: 'onaxsysapp'

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '$(DOTNET_CORE_VERSION)'
      displayName: 'Setup .NET SDK'
    - script: |
        echo "===Working Dir:::=> $(WORKING_DIRECTORY_SERVER)==="
        pwd
        ls -l
        dotnet restore
      workingDirectory: $(WORKING_DIRECTORY_SERVER)
      displayName: 'Restore Dependencies'
    - script: |
        echo "======Install and build Client UI packages======="
        npm install -f
        mkdir -p $(PUBLISH_PATH_UI)
        npm run build
      workingDirectory: $(WORKING_DIRECTORY_UI)
      displayName: 'Install NPM packages'
    - script: |
        echo "==========Verify Frontend Build (List Dir.)============"
        ls -l $(PUBLISH_PATH_UI)
      displayName: 'Verify Frontend Build'
    - script: |
        echo "==========Install Node for TailwindCSS NodeJS dependencies============"
        sudo apt-get update && \
        sudo apt-get install -y curl && \
        curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash - && \
        sudo apt-get install -y nodejs && \
        sudo npm install -g npm@latest && \
        sudo apt-get clean && \
        sudo rm -rf /var/lib/apt/lists/*
      displayName: 'Install Node for MVC TailwindCSS NodeJS dependencies'    
    - script: |
        echo "==========Running Tests============"
        ls -l
        dotnet test --no-build
      workingDirectory: $(WORKING_DIRECTORY)/AppTest
      displayName: 'Test'    
    - script: |
        echo "==========Building Server App============"
        node --version
        npm --version
        ls -l
        npm install
        ls -l
        dotnet build --configuration $(CONFIGURATION) --no-restore
      workingDirectory: $(WORKING_DIRECTORY_SERVER)
      displayName: 'Build Server App'    # Publishing to Azure Web App

    # SonarCloud - Run Code Analysis (must be after build)
    - task: SonarCloudAnalyze@3
      displayName: 'Run SonarCloud Code Analysis'

    - script: |
        set -e
        dotnet publish $(WORKING_DIRECTORY_SERVER)/WebApp.csproj --configuration $(CONFIGURATION) --no-build --output $(AZURE_WEBAPP_PACKAGE_PATH)
        echo "==========Verify Frontend Migration to build output============"
        ls -l $(AZURE_WEBAPP_PACKAGE_PATH)/wwwroot
      displayName: 'Publish'
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(AZURE_WEBAPP_PACKAGE_PATH)'
        ArtifactName: 'webapp'
        publishLocation: 'Container'
      displayName: 'Publish Artifacts'
    # Add Docker build/push steps as needed for main branch

    - task: SonarCloudPublish@3
      displayName: 'Publish SonarCloud Quality Gate Result'
      inputs:
        pollingTimeoutSec: '300'

- stage: SetRemoteEnvVars
  # dependsOn: TestAndBuildApp
  jobs:
  - job: set_remote_env_vars
    steps:
    - checkout: none
    
    # Debug step to verify variable values (without showing secrets)
    - task: Bash@3
      displayName: 'Debug - Verify variable values'
      inputs:
        targetType: 'inline'
        script: |
          echo "Debug: Checking variable values"
          echo "AzKeyVaultKeyVaultUrl exists: $([[ ! -z "$(AzKeyVaultKeyVaultUrl)" ]] && echo 'YES' || echo 'NO')"
          echo "AzKeyVaultClientSecret exists: $([[ ! -z "$(AzKeyVaultClientSecret)" ]] && echo 'YES' || echo 'NO')"
          echo "ONAX_ENV_VARS value: $(ONAX_ENV_VARS)"# Create script with environment variables for the remote server
    - task: Bash@3
      displayName: 'Prepare environment variables script'
      inputs:
        targetType: 'inline'
        script: |
          # Create a temporary script with the environment variables
          echo "#!/bin/bash" > $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "# Auto-generated environment variables script" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "sudo touch /etc/profile.d/$(ONAX_ENV_VARS)" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          
          # Add each environment variable to the script
          echo "if ! grep -q \"AzKeyVaultKeyVaultUrl\" /etc/profile.d/$(ONAX_ENV_VARS); then" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "  echo 'export AzKeyVaultKeyVaultUrl=\"$(AzKeyVaultKeyVaultUrl)\"' | sudo tee -a /etc/profile.d/$(ONAX_ENV_VARS)" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "fi" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          
          echo "if ! grep -q \"AzKeyVaultClientSecret\" /etc/profile.d/$(ONAX_ENV_VARS); then" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "  echo 'export AzKeyVaultClientSecret=\"$(AzKeyVaultClientSecret)\"' | sudo tee -a /etc/profile.d/$(ONAX_ENV_VARS)" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "fi" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh

          echo "if ! grep -q \"EncryptionKeyEnvVar\" /etc/profile.d/$(ONAX_ENV_VARS); then" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "  echo 'export EncryptionKeyEnvVar=\"$(EncryptionKeyEnvVar)\"' | sudo tee -a /etc/profile.d/$(ONAX_ENV_VARS)" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          echo "fi" >> $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          
          # Make the script executable
          chmod +x $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
          
          # Output the script content for debugging (without secrets)
          echo "Generated environment variables script:"
          grep -v "Secret" $(Build.ArtifactStagingDirectory)/env_vars_setup.sh
    
    # Copy the environment variables script to the remote server
    - task: CopyFilesOverSSH@0
      displayName: 'Copy environment variables script to server'
      inputs:
        sshEndpoint: 'onax-me-ssh-service-connection'
        sourceFolder: '$(Build.ArtifactStagingDirectory)'
        contents: 'env_vars_setup.sh'
        targetFolder: '/tmp'
        overwrite: true
        
    # Execute the script on the remote server
    - task: SSH@0
      displayName: 'Set environment variables on remote Ubuntu server'
      inputs:
        sshEndpoint: 'onax-me-ssh-service-connection'
        runOptions: 'inline'
        inline: |
          # Make the script executable and run it
          sudo chmod +x /tmp/env_vars_setup.sh
          sudo /tmp/env_vars_setup.sh
            # Ensure the file is executable and has correct permissions
          sudo chmod +x /etc/profile.d/$(ONAX_ENV_VARS)
          sudo chmod 644 /etc/profile.d/$(ONAX_ENV_VARS)
          
          # Verify that the variables are set
          echo "Environment variables have been set:"
          grep -v "Secret" /etc/profile.d/$(ONAX_ENV_VARS)
          
          # Clean up
          sudo rm -f /tmp/env_vars_setup.sh
        readyTimeout: '20000'

- stage: DeployToServer
  dependsOn: SetRemoteEnvVars
  jobs:
  - job: deploy_to_server
    steps:
    - checkout: none

    # Download the published artifact from previous stage
    - task: DownloadBuildArtifacts@0
      displayName: 'Download Published Artifact'
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'webapp'
        downloadPath: '$(Pipeline.Workspace)/webapp'

    # Copy files to the remote server using SSH
    - task: CopyFilesOverSSH@0
      displayName: 'Copy files to /var/www/onaxappcore on remote server'
      inputs:
        sshEndpoint: 'onax-me-ssh-service-connection'
        sourceFolder: '$(Pipeline.Workspace)/webapp/webapp/'
        contents: '**/*'
        targetFolder: '/var/www/onaxappcore'
        cleanTargetFolder: false
        overwrite: true
        
    # [Can be made optional or moved to seperate pipeline file]
    #   -- Explicitly set up logs directory with proper permissions
    - task: SSH@0
      displayName: 'Create logs directory with proper permissions'
      inputs:
        sshEndpoint: 'onax-me-ssh-service-connection'
        runOptions: 'inline'
        inline: |
          # Create logs directory with wide-open permissions to ensure app can write to it
          echo "Setting up logs directory with proper permissions..."
          sudo mkdir -p /var/www/onaxappcore/logs
          
          # Find the process user running the application
          PROCESS_USER=$(ps aux | grep -E 'dotnet.*onaxapp|kestrel.*onaxapp' | grep -v grep | head -1 | awk '{print $1}')
          
          if [ -z "$PROCESS_USER" ]; then
            # If process user not found, try to find the application's systemd service
            if [ -f /etc/systemd/system/onaxappcore.service ]; then
              PROCESS_USER=$(grep "User=" /etc/systemd/system/onaxappcore.service | cut -d= -f2)
              echo "Found systemd service user: $PROCESS_USER"
            elif [ -f /etc/systemd/system/kestrel-onaxappcore.service ]; then
              PROCESS_USER=$(grep "User=" /etc/systemd/system/kestrel-onaxappcore.service | cut -d= -f2)
              echo "Found kestrel service user: $PROCESS_USER"
            else
              # Default to www-data if we can't determine
              PROCESS_USER="www-data"
              echo "Using default www-data user"
            fi
          else
            echo "Found process running as user: $PROCESS_USER"
          fi
          
          # Give ownership to the process user
          sudo chown -R $PROCESS_USER:$PROCESS_USER /var/www/onaxappcore/logs
          
          # Set very permissive permissions to ensure no permission issues
          sudo chmod -R 777 /var/www/onaxappcore/logs
          
          # List the directory to confirm
          ls -la /var/www/onaxappcore/logs
          
          echo "Logs directory permissions set successfully"