name: Build and deploy OnaxApp via Docker Image

on:
  push:
    branches:
    - main
    # - dev

env:
  APP_WEBAPP_NAME: onaxapp
  AZURE_WEBAPP_PACKAGE_PATH: Onaxapp/publish
  CONFIGURATION: Release
  DOTNET_CORE_VERSION: 9.0.x
  WORKING_DIRECTORY: .
  PROJECT_DIRECTORY_NAME: WebApp
  WORKING_DIRECTORY_UI: clientapp
  PUBLISH_PATH_UI: WebApp/wwwroot/portal
  PUBLISHED_APP_PATH: WebApp/dist
  WORKING_DIRECTORY_SERVER: ./WebApp

jobs:
  frontend_env_dependencies:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.16.0'
    - name: Install TypeScript and Yarn
      run: |
        npm install -g typescript

  test_and_build_app:
    runs-on: ubuntu-latest
    needs: frontend_env_dependencies
    steps:
    - uses: actions/checkout@v4
    - name: Set Environment Variables into Github Actions
      run: |
        echo "SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)" >> $GITHUB_ENV
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Restore Dependencies
      working-directory: ${{ env.WORKING_DIRECTORY_SERVER }}  
      run: |
        echo "===Working Dir:::=> ${{ env.WORKING_DIRECTORY_SERVER }}==="
        pwd
        ls -l
        dotnet restore
    - name: Install NPM packages
      working-directory: ${{ env.WORKING_DIRECTORY }}/clientapp
      run: |
        echo "======Install and build Client UI packages======="
        npm install -f
        mkdir -p ${{env.WORKING_DIRECTORY}}/${{env.PUBLISH_PATH_UI}}
        npm run build
    - name: Verify Frontend Build
      run: |
        echo "==========Verify Frontend Build (List Dir.)============"
        ls -l ${{ env.WORKING_DIRECTORY }}/${{env.PUBLISH_PATH_UI}}        
        
    - name: Test
      working-directory: ${{ env.WORKING_DIRECTORY}}/AppTest
      run: |
        echo "==========Running Tests============"
        ls -l
        dotnet test --no-build
    - name : Build Docker Image
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
        echo "Short SHA: ${{ env.SHORT_SHA }}"
        docker build --no-cache -t ${{env.APP_WEBAPP_NAME}}:${{ env.SHORT_SHA }} -f ${{ env.PROJECT_DIRECTORY_NAME }}/Dockerfile .

    - name : Save Docker Image as tar
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        docker save ${{env.APP_WEBAPP_NAME}}:${{ env.SHORT_SHA }} -o ${{env.APP_WEBAPP_NAME}}.tar
        chmod 775 ${{env.APP_WEBAPP_NAME}}.tar
        ls -l

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.APP_WEBAPP_NAME}}.tar
        path: ${{ env.WORKING_DIRECTORY }}/${{env.APP_WEBAPP_NAME}}.tar

    - name: Display artifact URL
      run: |
        echo "Artifact full path: $RUNNER_TEMP/artifacts/${{env.APP_WEBAPP_NAME}}.tar"
        echo "Artifact URL: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"

  publish_to_dockerhub:
    runs-on: ubuntu-latest
    # needs: test_and_build_app
    if: github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    # - name: Setup Node.js
    #   uses: actions/setup-node@v3
    #   with:
    #     node-version: '20.16.0'
    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_CORE_VERSION }}
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_PASSWORD }}
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ${{ env.WORKING_DIRECTORY_SERVER }}/Dockerfile
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/${{env.APP_WEBAPP_NAME}}:latest
        build-args: |
          DBCONSTRING=${{ secrets.DBCONSTRING }}
        secrets: |
          DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_HUB_PASSWORD=${{ secrets.DOCKER_HUB_PASSWORD }}